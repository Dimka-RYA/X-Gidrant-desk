rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Улучшенная функция для проверки администратора
    function isAdmin() {
      let auth = request.auth;
      // Проверяем, аутентифицирован ли пользователь
      let isAuthenticated = auth != null;
      // Проверяем, существует ли документ пользователя
      let userExists = isAuthenticated && exists(/databases/$(database)/documents/users/$(auth.uid));
      // Получаем роль пользователя, если документ существует
      let isAdminRole = userExists && get(/databases/$(database)/documents/users/$(auth.uid)).data.role == 'admin';
      
      return isAuthenticated && userExists && isAdminRole;
    }
    
    // Функция для проверки диспетчера
    function isDispatcher() {
      let auth = request.auth;
      // Проверяем, аутентифицирован ли пользователь
      let isAuthenticated = auth != null;
      // Проверяем, существует ли документ пользователя
      let userExists = isAuthenticated && exists(/databases/$(database)/documents/users/$(auth.uid));
      // Получаем роль пользователя, если документ существует
      let isDispatcherRole = userExists && get(/databases/$(database)/documents/users/$(auth.uid)).data.role == 'dispatcher';
      
      return isAuthenticated && userExists && isDispatcherRole;
    }
    
    // Функция для проверки администратора или диспетчера
    function isAdminOrDispatcher() {
      return isAdmin() || isDispatcher();
    }
    
    // Правила для коллекции пользователей
    match /users/{userId} {
      // Разрешаем любому аутентифицированному пользователю читать все документы
      allow read: if request.auth != null;
      
      // Разрешаем создание новых пользователей
      allow create: if request.auth != null;
      
      // Пользователи могут изменять свои документы, админы - любые
      allow update, delete: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
    }
    
    // Явные правила для сервисных категорий
    match /service_categories/{categoryId} {
      // Все могут читать категории
      allow read: if true;
      
      // Только админы могут изменять категории
      allow write: if isAdmin();
    }
    
    // Правила для услуг
    match /services/{serviceId} {
      // Все могут читать услуги
      allow read: if true;
      
      // Только админы могут изменять услуги
      allow write: if isAdmin();
    }
    
    // Правила для заказов
    match /orders/{orderId} {
      // Пользователи видят свои заказы, админы и диспетчеры - все
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
      
      // Пользователи могут создавать заказы
      allow create: if request.auth != null;
      
      // Пользователи могут изменять свои заказы, админы и диспетчеры - любые
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
    }
    
    // Правила для уведомлений
    match /notifications/{notificationId} {
      // Пользователи видят свои уведомления, админы и диспетчеры - все
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
      
      // Пользователи, админы и диспетчеры могут создавать уведомления
      allow create: if request.auth != null;
      
      // Пользователи могут обновлять свои уведомления, админы и диспетчеры - любые
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
    }
    
    // Общие правила для других коллекций
    match /{document=**} {
      // Чтение разрешено всем аутентифицированным пользователям
      allow read: if request.auth != null;
      
      // Запись разрешена только админам и диспетчерам
      allow write: if isAdminOrDispatcher();
    }
  }
} 
 
 
 
 
 
service cloud.firestore {
  match /databases/{database}/documents {
    // Улучшенная функция для проверки администратора
    function isAdmin() {
      let auth = request.auth;
      // Проверяем, аутентифицирован ли пользователь
      let isAuthenticated = auth != null;
      // Проверяем, существует ли документ пользователя
      let userExists = isAuthenticated && exists(/databases/$(database)/documents/users/$(auth.uid));
      // Получаем роль пользователя, если документ существует
      let isAdminRole = userExists && get(/databases/$(database)/documents/users/$(auth.uid)).data.role == 'admin';
      
      return isAuthenticated && userExists && isAdminRole;
    }
    
    // Функция для проверки диспетчера
    function isDispatcher() {
      let auth = request.auth;
      // Проверяем, аутентифицирован ли пользователь
      let isAuthenticated = auth != null;
      // Проверяем, существует ли документ пользователя
      let userExists = isAuthenticated && exists(/databases/$(database)/documents/users/$(auth.uid));
      // Получаем роль пользователя, если документ существует
      let isDispatcherRole = userExists && get(/databases/$(database)/documents/users/$(auth.uid)).data.role == 'dispatcher';
      
      return isAuthenticated && userExists && isDispatcherRole;
    }
    
    // Функция для проверки администратора или диспетчера
    function isAdminOrDispatcher() {
      return isAdmin() || isDispatcher();
    }
    
    // Правила для коллекции пользователей
    match /users/{userId} {
      // Разрешаем любому аутентифицированному пользователю читать все документы
      allow read: if request.auth != null;
      
      // Разрешаем создание новых пользователей
      allow create: if request.auth != null;
      
      // Пользователи могут изменять свои документы, админы - любые
      allow update, delete: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
    }
    
    // Явные правила для сервисных категорий
    match /service_categories/{categoryId} {
      // Все могут читать категории
      allow read: if true;
      
      // Только админы могут изменять категории
      allow write: if isAdmin();
    }
    
    // Правила для услуг
    match /services/{serviceId} {
      // Все могут читать услуги
      allow read: if true;
      
      // Только админы могут изменять услуги
      allow write: if isAdmin();
    }
    
    // Правила для заказов
    match /orders/{orderId} {
      // Пользователи видят свои заказы, админы и диспетчеры - все
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
      
      // Пользователи могут создавать заказы
      allow create: if request.auth != null;
      
      // Пользователи могут изменять свои заказы, админы и диспетчеры - любые
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
    }
    
    // Правила для уведомлений
    match /notifications/{notificationId} {
      // Пользователи видят свои уведомления, админы и диспетчеры - все
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
      
      // Пользователи, админы и диспетчеры могут создавать уведомления
      allow create: if request.auth != null;
      
      // Пользователи могут обновлять свои уведомления, админы и диспетчеры - любые
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdminOrDispatcher()
      );
    }
    
    // Общие правила для других коллекций
    match /{document=**} {
      // Чтение разрешено всем аутентифицированным пользователям
      allow read: if request.auth != null;
      
      // Запись разрешена только админам и диспетчерам
      allow write: if isAdminOrDispatcher();
    }
  }
} 
 
 
 
 
 
 